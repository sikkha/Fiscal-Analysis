rename("SPY" = spy_wt,
"SHY" = shy_wt,
"GLD" = gld_wt) %>%
gather(key,value) %>%
ggplot(aes(factor(key, level = c("SPY", "SHY", "GLD")), value*100)) +
geom_bar(stat = 'identity', fill = "blue") +
geom_text(aes(label = round(value,2)*100), nudge_y = 5) +
labs(x = "Assets",
y = "Weights (%)",
title = "Derived weighting to improve returns")
install.packages("jsonlite")
library("jsonlite")
btc <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=BTCUSDT&interval=1d&limit=365")
btc
plot(btc, type="l")
library("jsonlite")
btc <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=BTCUSDT&interval=1d&limit=365")
ada <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=ADAUSDT&interval=1d&limit=365")
plot(ada)
plot(ada, btc)
data<-data.frame(btc,ada)
plot(data)
plot(data.btc)
plot(data$x, data$.btc)
btc$x
btc.x
btc
btc[1]
btc[2]
btc[3]
ggplot() + btc + ada
ggplot(btc)
library(ggplot)
library(ggplot2)
ggplot(btc)
ggplot(data=btc)
plot(data)
plot(ada)
plot(btc)
plot(btc, type="l")
line(ada, type="l", col="green")
line(ada, col="green")
lines(ada, col="green")
plot(btc, type="l")
lines(ada, col="green")
plot(btc, type="l")
par(new=TRUE)
plot(ada, type="l", col="green")
plot(btc, type="l")
plot(ada, type="l", col="green", add=TRUE)
plot(btc, type="l")
plot(ada, type="l", col="green", add=TRUE)
plot(btc, type="l")
par(new=T)
plot(ada, type="l", col="green", add=TRUE)
library("jsonlite")
btc <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=BTCUSDT&interval=1d&limit=365")
ada <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=ADAUSDT&interval=1d&limit=365")
eth <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=ETHUSDT&interval=1d&limit=365")
plot(btc, type="l")
par(new=T)
plot(ada, type="l", col="green", add=TRUE)
par(new=T)
plot(eth, type="l", col="red", add=TRUE)
library("jsonlite")
btc <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=BTCUSDT&interval=1d&limit=365")
ada <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=ADAUSDT&interval=1d&limit=365")
eth <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=ETHUSDT&interval=1d&limit=365")
doge <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=DOGEUSDT&interval=1d&limit=365")
plot(btc, type="l")
par(new=T)
plot(ada, type="l", col="green", add=TRUE)
par(new=T)
plot(eth, type="l", col="red", add=TRUE)
par(new=T)
plot(doge, type="l", col="red", add=TRUE)
library("jsonlite")
btc <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=BTCUSDT&interval=1d&limit=365")
ada <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=ADAUSDT&interval=1d&limit=365")
eth <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=ETHUSDT&interval=1d&limit=365")
doge <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=DOGEUSDT&interval=1d&limit=365")
plot(btc, type="l")
par(new=T)
plot(ada, type="l", col="green", add=TRUE)
par(new=T)
plot(eth, type="l", col="red", add=TRUE)
par(new=T)
plot(doge, type="l", col="blue", add=TRUE)
library("jsonlite")
btc <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=BTCUSDT&interval=1d&limit=365")
ada <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=ADAUSDT&interval=1d&limit=365")
eth <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=ETHUSDT&interval=1d&limit=365")
doge <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=DOGEUSDT&interval=1d&limit=365")
plot(btc, type="l")
par(new=T)
#plot(ada, type="l", col="green", add=TRUE)
#par(new=T)
#plot(eth, type="l", col="red", add=TRUE)
#par(new=T)
plot(doge, type="l", col="blue", add=TRUE)
library("jsonlite")
btc <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=BTCUSDT&interval=1d&limit=365")
ada <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=ADAUSDT&interval=1d&limit=365")
eth <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=ETHUSDT&interval=1d&limit=365")
doge <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=DOGEUSDT&interval=1d&limit=365")
plot(btc, col="magenta", type="l")
par(new=T)
#plot(ada, type="l", col="green", add=TRUE)
#par(new=T)
#plot(eth, type="l", col="red", add=TRUE)
#par(new=T)
plot(doge, type="l", col="blue", add=TRUE)
axis.Date(1, at=seq(min(df$date), max(df$date), by="months"), format="%m-%Y")
axis(1, btc$dates, format(btc$dates, "%Y-%m-%d"))
axis(1, format(1, "%Y-%m-%d"))
axis(1, format("%Y-%m-%d"))
plot(btc, type="l")
axis(1, format("%Y-%m-%d"))
plot(doge, type="l")
plot(eth, type="l")
plot(ada, type="l")
plot(doge, type="l")
doge
View(btc)
btc$v1
btc$1
btc[1]
btc[2]
btc[1][2]
btc[1].[2]
btc[1].2
glimpse(btc)
library(glimpse)
library(dplyr)
glimpse(btc)
new DateTime(1970,1,1,0,0,0,0,System.DateTimeKind.Utc).AddMilliseconds(1593339378252)
btc[1]
as_datetime(btc[1])
parsedate(btc[1])
as.Date.numeric(btc[1])
as.Date.default(btc[1])
as.Date.numeric(btc[1])
install.packages(datetime)
library(datetime)
as.POSIXct(btc[1], origin="1970-01-01")
library(anytime)
install.packages(anytime)
install.packages("anytime")
anytime(btc[1])
library(anytime)
anytime(btc[1])
anytime(btc[1], asUTC=FALSE)
anytime(1590105600000)
doge <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=DOGEUSDT&interval=1d&limit=30")
plot(doge, type="l")
library("jsonlite")
# original 365
#btc <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=BTCUSDT&interval=1d&limit=365")
btc <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=BTCUSDT&interval=1d&limit=30")
ada <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=ADAUSDT&interval=1d&limit=30")
eth <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=ETHUSDT&interval=1d&limit=30")
doge <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=DOGEUSDT&interval=1d&limit=30")
plot(btc, col="magenta", type="l")
par(new=T)
plot(ada, type="l", col="green", add=TRUE)
par(new=T)
plot(eth, type="l", col="red", add=TRUE)
par(new=T)
plot(doge, type="l", col="blue", add=TRUE)
plot(doge, type="l")
par(new=T)
plot(btc, type="l", col="red")
plot(doge, type="l")
doge <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=DOGEUSDT&interval=1d&limit=60")
plot(doge, type="l")
btc <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=BTCUSDT&interval=1d&limit=60")
par(new=T)
plot(btc, type="l", col="red")
btc <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=BTCUSDT&interval=1d&limit=10")
doge <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=DOGEUSDT&interval=1d&limit=10")
plot(doge, type="l")
par(new=T)
plot(btc, type="l", col="red")
plot(btc, type="l", col="red")
plot(doge, type="l")
plot(btc, type="l", col="red")
par(new=T)
plot(doge, type="l" col="blue")
plot(doge, type="l", col="blue")
ada <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=ADAUSDT&interval=1d&limit=10")
par(new=T)
plot(ada, type="l", col="green")
btc <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=BTCUSDT&interval=1d&limit=10")
btc <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=BTCUSDT&interval=1d&limit=10")
plot(btc, type="l", col="red")
dogebtc <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=DOGEBTC&interval=1d&limit=10")
par(new=T)
plot(dogebtc, type="l", col="blue")
par(new=T)
plot(doge, type="l", col="green")
library("jsonlite")
# original 365
#btc <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=BTCUSDT&interval=1d&limit=365")
btc <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=BTCUSDT&interval=1d&limit=30")
ada <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=ADAUSDT&interval=1d&limit=30")
eth <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=ETHUSDT&interval=1d&limit=30")
doge <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=DOGEUSDT&interval=1d&limit=30")
dogebtc <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=DOGEBTC&interval=1d&limit=30")
plot(btc, col="magenta", type="l")
par(new=T)
#plot(ada, type="l", col="green", add=TRUE)
#par(new=T)
#plot(eth, type="l", col="red", add=TRUE)
#par(new=T)
plot(doge, type="l", col="blue", add=TRUE)
par(new=T)
plot(dogebtc, type="l", col="green")
plot(doge, type="l", col="green")
plot(dogebtc, type="l", col="green")
plot(btc, type="l", col="green")
library("jsonlite")
# original 365
#btc <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=BTCUSDT&interval=1d&limit=365")
btc <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=BTCUSDT&interval=1d&limit=30")
ada <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=ADAUSDT&interval=1d&limit=30")
eth <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=ETHUSDT&interval=1d&limit=30")
doge <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=DOGEUSDT&interval=1d&limit=30")
dogebtc <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=DOGEBTC&interval=1d&limit=30")
plot(btc, col="magenta", type="l")
par(new=T)
#plot(ada, type="l", col="green", add=TRUE)
#par(new=T)
#plot(eth, type="l", col="red", add=TRUE)
#par(new=T)
plot(doge, type="l", col="blue", add=TRUE)
par(new=T)
plot(dogebtc, type="l", col="green")
library("jsonlite")
# original 365
#btc <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=BTCUSDT&interval=1d&limit=365")
btc <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=BTCUSDT&interval=1d&limit=30")
ada <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=ADAUSDT&interval=1d&limit=30")
eth <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=ETHUSDT&interval=1d&limit=30")
doge <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=DOGEUSDT&interval=1d&limit=30")
dogebtc <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=DOGEBTC&interval=1d&limit=30")
plot(btc, col="magenta", type="l")
par(new=T)
#plot(ada, type="l", col="green", add=TRUE)
#par(new=T)
#plot(eth, type="l", col="red", add=TRUE)
#par(new=T)
plot(doge, type="l", col="blue", add=TRUE)
par(new=T)
plot(dogebtc, type="l", col="green")
plot(btc, col="magenta", type="l")
par(new=T)
plot(eth, type="l", col="red", add=TRUE)
par(new=T)
plot(ada, type="l", col="blue", add=TRUE)
plot(doge, type="l", col="green", add=TRUE)
plot(btc, col="magenta", type="l")
par(new=T)
plot(eth, type="l", col="red", add=TRUE)
par(new=T)
plot(ada, type="l", col="blue", add=TRUE)
par(new=T)
plot(doge, type="l", col="green", add=TRUE)
par(new=T)
plot(dogebtc, type="l", col="orange", add=TRUE)
ada
View(ada)
View(btc)
View(eth)
View(ada)
View(doge)
View(dogebtc)
View(btc)
View(eth)
View(doge)
plot(doge, type="l", col="green", add=TRUE)
par(new=T)
plot(dogebtc, type="l", col="orange", add=TRUE)
adabtc <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=ADABTC&interval=1d&limit=30")
plot(adabtc, type="l", col="blue", add=TRUE)
par(new=T)
plot(dogebtc, type="l", col="orange", add=TRUE)
ethbtc <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=ETHBTC&interval=1d&limit=30")
par(new=T)
plot(ethbtc, type="l", col="green", add=TRUE)
library("jsonlite")
# original 365
#btc <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=BTCUSDT&interval=1d&limit=365")
btc <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=BTCUSDT&interval=1d&limit=30")
ada <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=ADAUSDT&interval=1d&limit=30")
eth <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=ETHUSDT&interval=1d&limit=30")
doge <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=DOGEUSDT&interval=1d&limit=30")
ethbtc <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=ETHBTC&interval=1d&limit=30")
adabtc <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=ADABTC&interval=1d&limit=30")
dogebtc <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=DOGEBTC&interval=1d&limit=30")
plot(btc, col="magenta", type="l")
par(new=T)
#plot(ada, type="l", col="green", add=TRUE)
#par(new=T)
#plot(eth, type="l", col="red", add=TRUE)
#par(new=T)
plot(doge, type="l", col="blue", add=TRUE)
par(new=T)
plot(dogebtc, type="l", col="green")
plot(dogebtc, type="l", col="orange", add=TRUE)
par(new=T)
plot(adabtc, type="l", col="blue", add=TRUE)
par(new=T)
plot(ethbtc, type="l", col="green", add=TRUE)
View(btc)
View(eth)
View(ada)
View(doge)
View(dogebtc)
View(ethbtc)
View(adabtc)
library("jsonlite")
# original 365
#btc <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=BTCUSDT&interval=1d&limit=365")
btc <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=BTCUSDT&interval=1d&limit=30")
ada <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=ADAUSDT&interval=1d&limit=30")
eth <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=ETHUSDT&interval=1d&limit=30")
doge <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=DOGEUSDT&interval=1d&limit=30")
ethbtc <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=ETHBTC&interval=1d&limit=30")
adabtc <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=ADABTC&interval=1d&limit=30")
dogebtc <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=DOGEBTC&interval=1d&limit=30")
#chart1
plot(btc, col="grey", type="l")
par(new=T)
plot(ada, type="l", col="blue", add=TRUE)
par(new=T)
plot(eth, type="l", col="green", add=TRUE)
par(new=T)
plot(doge, type="l", col="orange", add=TRUE)
#chart2
plot(dogebtc, type="l", col="orange", add=TRUE)
par(new=T)
plot(adabtc, type="l", col="blue", add=TRUE)
par(new=T)
plot(ethbtc, type="l", col="green", add=TRUE)
bnbbtc <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=BNBBTC&interval=1d&limit=30")
par(new=T)
plot(bnbbtc, type="l", col="magenta", add=TRUE)
library("jsonlite")
# original 365
#btc <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=BTCUSDT&interval=1d&limit=365")
btc <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=BTCUSDT&interval=1d&limit=30")
ada <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=ADAUSDT&interval=1d&limit=30")
eth <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=ETHUSDT&interval=1d&limit=30")
doge <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=DOGEUSDT&interval=1d&limit=30")
ethbtc <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=ETHBTC&interval=1d&limit=30")
adabtc <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=ADABTC&interval=1d&limit=30")
dogebtc <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=DOGEBTC&interval=1d&limit=30")
#chart1
plot(btc, col="grey", type="l")
par(new=T)
plot(ada, type="l", col="blue", add=TRUE)
par(new=T)
plot(eth, type="l", col="green", add=TRUE)
par(new=T)
plot(doge, type="l", col="orange", add=TRUE)
par(new=T)
plot(bnbbtc, type="l", col="magenta", add=TRUE)
View(bnbbtc)
bnb <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=BNBUSTD&interval=1d&limit=30")
bnb <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=BNBUSTD&interval=1d&limit=30")
bnb <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=BNBBTC&interval=1d&limit=30")
library("jsonlite")
# original 365
#btc <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=BTCUSDT&interval=1d&limit=365")
btc <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=BTCUSDT&interval=1d&limit=30")
ada <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=ADAUSDT&interval=1d&limit=30")
eth <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=ETHUSDT&interval=1d&limit=30")
doge <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=DOGEUSDT&interval=1d&limit=30")
ethbtc <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=ETHBTC&interval=1d&limit=30")
adabtc <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=ADABTC&interval=1d&limit=30")
dogebtc <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=DOGEBTC&interval=1d&limit=30")
#chart1
plot(btc, col="grey", type="l")
par(new=T)
plot(ada, type="l", col="blue", add=TRUE)
par(new=T)
plot(eth, type="l", col="green", add=TRUE)
par(new=T)
plot(doge, type="l", col="orange", add=TRUE)
#chart2
plot(dogebtc, type="l", col="orange", add=TRUE)
par(new=T)
plot(adabtc, type="l", col="blue", add=TRUE)
par(new=T)
plot(ethbtc, type="l", col="green", add=TRUE)
library("jsonlite")
# original 365
#btc <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=BTCUSDT&interval=1d&limit=365")
btc <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=BTCUSDT&interval=1d&limit=30")
ada <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=ADAUSDT&interval=1d&limit=30")
eth <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=ETHUSDT&interval=1d&limit=30")
doge <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=DOGEUSDT&interval=1d&limit=30")
ethbtc <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=ETHBTC&interval=1d&limit=30")
adabtc <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=ADABTC&interval=1d&limit=30")
dogebtc <- jsonlite::fromJSON("https://api.binance.com/api/v3/klines?symbol=DOGEBTC&interval=1d&limit=30")
#chart1
plot(btc, col="grey", type="l")
par(new=T)
plot(ada, type="l", col="blue", add=TRUE)
par(new=T)
plot(eth, type="l", col="green", add=TRUE)
par(new=T)
plot(doge, type="l", col="orange", add=TRUE)
#chart2
plot(dogebtc, type="l", col="orange", add=TRUE)
par(new=T)
plot(adabtc, type="l", col="blue", add=TRUE)
par(new=T)
plot(ethbtc, type="l", col="green", add=TRUE)
plot(dogebtc, type="l", col="green", add=TRUE)
plot(etcbtc, type="l", col="green", add=TRUE)
plot(ethbtc, type="l", col="green", add=TRUE)
plot(adabtc, type="l", col="green", add=TRUE)
plot(ethbtc, type="l", col="green", add=TRUE)
plot(dogeusdt, type="l", col="green", add=TRUE)
plot(adausdt, type="l", col="green", add=TRUE)
plot(ethusdt, type="l", col="green", add=TRUE)
plot(adausdt, type="l", col="green", add=TRUE)
plot(doge, type="l", col="green", add=TRUE)
install.packages("equatiomatic")
# Assignment1
# Loading
library("tidyverse")
library("readxl")
#setwd("~/Desktop/workspace/DA8410 Fiscal and Monetary Policy Analysis/DA8410 Part 2")
setwd("~/Documents/GitHub/Fiscal-Analysis/Public-Education-Policy-and-Spending/data")
# xls files
#my_data <- read_excel("DA.841,PA8603-DATA.xls")
my_data <- read.csv("DA.841,PA8603-DATA_CSV.csv")
#data check (for debug purpose)
#head("my_data", 4)
#print(my_data)
#demand-side explanation
#Model1: examining all independent variables
## old version
model1 <- lm(GEDU ~ GDP + POP + URB + GLOBAL + INEQTY + REV + TRADE + LABOR + DGOV + GEDUtm1, data = my_data)
#summary(model1) $coefficient
summary(model1)
confint (model1)
## new version
#fitted.model1 <- lm(GEDU ~ GDP + POP + URB + GLOBAL + INEQTY + REV + TRADE + LABOR + DGOV + GEDUtm1, data = my_data)
#summary(model1) $coefficient
#confint (model1)
#Model2: Wagner's law
model2 <- lm(GEDU ~ GDP + POP + URB + REV, data = my_data)
model2_1 <- lm(GEDU ~ POP + URB + REV, data = my_data)
model2_2 <- lm(GEDU ~ GDP + POP + URB, data = my_data)
summary(model2)
confint(model2)
summary(model2_1)
confint(model2_1)
summary(model2_2)
confint(model2_2)
#Model3: Compensation Theory
model3 <- lm(GEDU ~ GLOBAL + DGOV, data = my_data)
summary(model3)
confint(model3)
#Model4: Median Voter
model4 <- lm(GEDU ~ INEQTY + DGOV, data = my_data)
summary(model4)
confint(model4)
#Model5: Interest Group Theory
model5 <- lm(GEDU ~ TRADE + LABOR, data = my_data)
summary(model5)
confint(model5)
#Supply-Side Explanation
#Model 6: Incrementalism Theory
model6 <- lm(GEDU ~ GEDUtm1, data = my_data)
summary(model6)
confint(model6)
#library(car)
#vif(model1)
#check for multicollinearity problem
library(corpcor)
cor2pcor(cov(model1))
library(mctest)
imcdiag(mod = model1, method = "VIF", vif = 5)
imcdiag(mod = model2, method = "VIF", vif = 5)
imcdiag(mod = model2_1, method = "VIF", vif = 5)
imcdiag(mod = model2_2, method = "VIF", vif = 5)
imcdiag(mod = model3, method = "VIF", vif = 5)
imcdiag(mod = model4, method = "VIF", vif = 5)
imcdiag(mod = model5, method = "VIF", vif = 5)
imcdiag(mod = model6, method = "VIF", vif = 5)
#library(GGally)
#ggpairs(mydata)
#ggpairs(my_data, c('GEDU', 'GDP', 'POP', 'URB', 'GLOBAL', 'INEQTY', 'REV', 'TRADE', 'LABOR', 'DGOV', 'GEDUtm1'))
#library(car)
#crPlots(model1)
#crPlots(model2_1)
#crPlots(model3)
#crPlots(model4)
#crPlots(model5)
#crPlots(model6)
library(apaTables)
apa.reg.table(model1)
library(stargazer)
stargazer(model1, model2_1, model3, model4, model5, model6, type="text")
library(broom)
tidy(model1)
library(equatiomatic)
cat(extract_eq(model1))
